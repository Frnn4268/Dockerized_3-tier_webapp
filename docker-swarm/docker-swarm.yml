version: '3.7'
services:
  client-react-nginx:
    image: frnn4268/client-react-vite:latest
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
    init: true
    networks:
      - frontend
    ports:
      - 80:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  api-node:
    image: frnn4268/api-node:latest
    read_only: true
    deploy:
      mode: replicated
      replicas: 1
      update_config:
        order: start-first
    init: true
    environment:
      - DATABASE_URL_FILE=/run/secrets/database-url
    secrets:
      - database-url
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "node", "/usr/src/app/healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  api-golang:
    image: frnn4268/api-golang:latest
    read_only: true
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        order: start-first
    init: true
    environment:
      - DATABASE_URL_FILE=/run/secrets/database-url
    secrets:
      - database-url
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  db:
    image: postgres:15.1-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - PGUSER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-passwd
    secrets:
      - postgres-passwd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  pgdata:

networks:
  frontend:
  backend:

secrets:
  database-url:
    external: true
  postgres-passwd:
    external: true